import os
import time
import kivy
from kivy.app import App   
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout
from kivy.uix.textinput import TextInput
from kivy.uix.button import Button
from kivy.clock import Clock
from kivy.graphics import Color, Rectangle
from kivy.uix.image import AsyncImage
from kivy.lang import Builder
from kivy.uix.image import Image
class Interact(GridLayout):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)

        self.cols = 1
        self.part1 = GridLayout()
        self.part1.cols = 2
        self.part2 = GridLayout(cols=4, row_force_default=True, row_default_height=100,rows = 0)
    
        if os.path.isfile("prev_details.txt"):#Saves previous input to a txt file and redisplays it on launch
           with open("prev_details.txt", "r") as f:
            d = f.read().split(",")
            prev_preset = d[0]
            prev_time = d[1]

        else:
            prev_preset = ""
            prev_time = ""

        
        self.cols = 1

        #self.part1.add_widget(self.logo)
        #self.part1.add_widget(Label(text=('')))

        self.part1.PresetL =Label(text=("Preset: " + prev_preset),font_size = 18)
        self.part1.add_widget(self.part1.PresetL)
        self.part1.Preset = TextInput(text= (prev_preset),multiline=False)
        self.part1.add_widget(self.part1.Preset)
        
        self.part1.CycleTimeL = Label(text=("CycleTime Seconds: " + prev_time ),font_size = 18)
        self.part1.add_widget(self.part1.CycleTimeL)
        self.part1.CycleTime = TextInput(text=(prev_preset), multiline=False)
        self.part1.add_widget(self.part1.CycleTime)

        self.part1.Ct = Label(text=("Current Cycles: \n"),font_size = 18)
        self.part1.add_widget(self.part1.Ct)

        self.Apply = Button(text = "Apply",font_size = 40) 
        self.Apply.bind(on_press=self.Apply_Button)
        self.part1.add_widget(self.Apply)
        
        self.add_widget(self.part1)

        self.Pause = Button(text=("Pause"),font_size = 40,size_hint_x=100, width=100)
        self.part2.add_widget(self.Pause)

        self.Reset = Button(text=("Reset"),font_size = 40,size_hint_x=100, width=100)
        self.part2.add_widget(self.Reset)
        
        self.part1.add_widget(self.part2)

    def Apply_Button(self, i):

        Preset = self.part1.Preset.text#grabbing data from the fields to save
        CycleTime = self.part1.CycleTime.text

        print("Hit")
        self.part1.cycles = 0
        self.part1.cycleCap = int(self.part1.Preset.text)

        self.part1.PresetL.text = ("Preset: " + Preset)

        self.part1.CycleTimeL.text = ("CycleTime Seconds: " + CycleTime)
        user_input_time = int(self.part1.CycleTime.text)

        self.cycle_count = Clock.schedule_interval(self.cycle_updater, user_input_time)

        with open("prev_details.txt", "w") as f:#Writing previous input to local txt file
            f.write(f"{Preset},{CycleTime}")

    def cycle_updater(self, dt):
        self.part1.Ct.text = "Current Cycles: " + str(self.cycles)
        self.part1.cycles += 1
        if(self.part1.cycles == self.part1.cycleCap):
            self.cycle_count.cancel()

class GUI(App):
    def build(self):
        return Interact()
if __name__ =="__main__":
    GUI().run() 
